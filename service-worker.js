//const CACHE_VERSION = 'v7.0';===== SERVICE WORKER –î–õ–Ø –ê–°–ò–°–¢–ï–ù–¢–ê –ù–£–û–° =====

const CACHE_VERSION = 'v6.6';
const STATIC_CACHE = `assistentNUOS-static-${CACHE_VERSION}`;
const DYNAMIC_CACHE = `assistentNUOS-dynamic-${CACHE_VERSION}`;

// –†–µ—Å—É—Ä—Å–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
const STATIC_CACHE_URLS = [
    '/',
    '/index.html',
    '/manifest.json',
    '/assets/css/components.css',
    '/assets/css/index.css',
    '/assets/css/main.css',
    '/assets/css/pages.css',
    '/assets/css/responsive.css',
    '/assets/css/offline.css',
    '/assets/css/about-new.css',
    '/assets/js/app.js',
    '/assets/js/pwa.js',
    '/assets/images/logo.svg',
    '/assets/images/logo.png',
    '/assets/images/background-primary.png',
    '/assets/images/background-secondary.png',
    // –ê–≤–∞—Ç–∞—Ä–∏ –∫–æ–º–∞–Ω–¥–∏
    '/assets/images/avatars/Yevhenii.png',
    '/assets/images/avatars/Vova.png',
    '/assets/images/avatars/Katya.png',
    '/assets/images/avatars/Olena.png',
    '/assets/images/avatars/Olesya.jpeg',
    '/assets/images/avatars/Trushlyakov Evgen Ivanovich.png',
    '/assets/images/avatars/Slobodyan Sergiy Olegovich.png',
    '/assets/images/avatars/Pavlov Gennady Viktorovich.png',
    '/assets/images/avatars/Dubinsky Oleg Yuriyovich.png',
    '/assets/images/avatars/Mikhailov Mikhailo Serhiyovich.png',
    // –°—Ç–æ—Ä—ñ–Ω–∫–∏
    '/pages/about.html',
    '/pages/university.html',
    '/pages/schedule.html',
    '/pages/student-republic.html',
    '/pages/leadership.html',
    '/pages/offline.html'
];

// ===== –ü–û–î–Ü–á SERVICE WORKER =====

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
self.addEventListener('install', event => {
    console.log('üîß Service Worker: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è');
    
    event.waitUntil(
        (async () => {
            try {
                const cache = await caches.open(CACHE_NAME);
                console.log('üì¶ –ö–µ—à—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤...');
                await cache.addAll(STATIC_CACHE_URLS);
                console.log('‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –∑–∞–∫–µ—à–æ–≤–∞–Ω–æ');
                
                // –§–æ—Ä—Å—É—î–º–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –Ω–æ–≤–æ–≥–æ SW
                self.skipWaiting();
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è:', error);
            }
        })()
    );
});

// –ê–∫—Ç–∏–≤–∞—Ü—ñ—è
self.addEventListener('activate', event => {
    console.log('üöÄ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è');
    
    event.waitUntil(
        (async () => {
            try {
                // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∫–µ—à—ñ
                const cacheNames = await caches.keys();
                const deletePromises = cacheNames
                    .filter(name => name !== CACHE_NAME)
                    .map(name => {
                        console.log('üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à:', name);
                        return caches.delete(name);
                    });
                
                await Promise.all(deletePromises);
                
                // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å—ñ–º–∞ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
                await self.clients.claim();
                
                console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:', error);
            }
        })()
    );
});

// –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
self.addEventListener('fetch', event => {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ-GET –∑–∞–ø–∏—Ç–∏
    if (event.request.method !== 'GET') {
        return;
    }
    
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –¥–æ —ñ–Ω—à–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
    if (!event.request.url.startsWith(self.location.origin)) {
        return;
    }
    
    event.respondWith(handleFetch(event.request));
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
self.addEventListener('message', event => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        console.log('‚è© –ü—Ä–∏–º—É—Å–æ–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è Service Worker');
        self.skipWaiting();
    }
});

// ===== –°–¢–†–ê–¢–ï–ì–Ü–á –ö–ï–®–£–í–ê–ù–ù–Ø =====

async function handleFetch(request) {
    const url = new URL(request.url);
    
    try {
        // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if (request.headers.get('accept')?.includes('text/html')) {
            return await handlePageRequest(request);
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ (CSS, JS, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        if (isStaticResource(url.pathname)) {
            return await handleStaticResource(request);
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        if (isImageResource(url.pathname)) {
            return await handleImageResource(request);
        }
        
        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –º–µ—Ä–µ–∂–∞ –∑ —Ñ–æ–ª–±–µ–∫–æ–º –Ω–∞ –∫–µ—à
        return await networkFirst(request);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É:', error);
        return await handleOfflineResponse(request);
    }
}

// Cache First –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
async function handleStaticResource(request) {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
        return cachedResponse;
    }
    
    try {
        const networkResponse = await fetch(request);
        if (networkResponse.ok) {
            const cache = await caches.open(CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }
        return networkResponse;
    } catch (error) {
        console.log('üì± –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –æ—Ñ–ª–∞–π–Ω:', request.url);
        throw error;
    }
}

// Network First –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
async function handlePageRequest(request) {
    try {
        const networkResponse = await fetch(request);
        if (networkResponse.ok) {
            const cache = await caches.open(CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }
        return networkResponse;
    } catch (error) {
        console.log('üì± –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –∫–µ—à—É:', request.url);
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            return cachedResponse;
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫ fallback
        return await caches.match('/pages/offline.html') || await caches.match('/index.html');
    }
}

// Stale While Revalidate –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
async function handleImageResource(request) {
    const cachedResponse = await caches.match(request);
    
    const fetchPromise = fetch(request)
        .then(response => {
            if (response.ok) {
                const cache = caches.open(CACHE_NAME);
                cache.then(c => c.put(request, response.clone()));
            }
            return response;
        })
        .catch(() => null);
    
    return cachedResponse || await fetchPromise || await createOfflineImageResponse();
}

// Network First –∑ —Ñ–æ–ª–±–µ–∫–æ–º –Ω–∞ –∫–µ—à
async function networkFirst(request) {
    try {
        const networkResponse = await fetch(request);
        if (networkResponse.ok) {
            const cache = await caches.open(CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }
        return networkResponse;
    } catch (error) {
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            return cachedResponse;
        }
        throw error;
    }
}

// ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

function isStaticResource(pathname) {
    return pathname.includes('.css') || 
           pathname.includes('.js') || 
           pathname.includes('.woff') || 
           pathname.includes('.woff2') ||
           pathname.includes('.ttf');
}

function isImageResource(pathname) {
    return pathname.includes('.png') || 
           pathname.includes('.jpg') || 
           pathname.includes('.jpeg') || 
           pathname.includes('.svg') || 
           pathname.includes('.webp') ||
           pathname.includes('.gif');
}

async function handleOfflineResponse(request) {
    // –î–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if (request.headers.get('accept')?.includes('text/html')) {
        return await caches.match('/pages/offline.html') || await caches.match('/index.html');
    }
    
    // –î–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    if (isImageResource(request.url)) {
        return await createOfflineImageResponse();
    }
    
    // –î–ª—è —ñ–Ω—à–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    return new Response('–û—Ñ–ª–∞–π–Ω - —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', {
        status: 503,
        statusText: 'Service Unavailable'
    });
}

async function createOfflineImageResponse() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π SVG —è–∫ –∑–∞–≥–ª—É—à–∫—É
    const svg = `
        <svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="#f0f0f0"/>
            <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="#666">
                üì± –û—Ñ–ª–∞–π–Ω
            </text>
        </svg>
    `;
    
    return new Response(svg, {
        headers: {
            'Content-Type': 'image/svg+xml',
            'Cache-Control': 'no-cache'
        }
    });
}

console.log('üéØ Service Worker –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –ê—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ù–£–û–°');
