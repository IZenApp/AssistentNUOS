// ===== PWA –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨ –î–õ–Ø –ê–°–ò–°–¢–ï–ù–¢–ê –ù–£–û–° =====

console.log('üöÄ PWA —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ PWA —Ñ—É–Ω–∫—Ü—ñ–π
if ('serviceWorker' in navigator) {
    console.log('‚úÖ Service Worker –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
    
    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Service Worker
    registerServiceWorker();
} else {
    console.log('‚ùå Service Worker –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
}

// ===== SERVICE WORKER –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø =====
async function registerServiceWorker() {
    try {
        const registration = await navigator.serviceWorker.register('./service-worker.js', {
            scope: './'
        });
        console.log('‚úÖ Service Worker –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ:', registration.scope);
        
        // –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
        registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            console.log('üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Service Worker');
            
            newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    showUpdateNotification();
                }
            });
        });
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π SW
        if (registration.active) {
            console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
        }
        
        return registration;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Service Worker:', error);
        showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—É', 'error');
        return null;
    }
}

function showUpdateNotification() {
    const updateBtn = document.createElement('button');
    updateBtn.textContent = '–û–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫';
    updateBtn.style.cssText = `
        background: white;
        color: #667eea;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 600;
        margin-left: 10px;
    `;
    
    updateBtn.addEventListener('click', () => {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.getRegistration().then(reg => {
                if (reg?.waiting) {
                    reg.waiting.postMessage({ type: 'SKIP_WAITING' });
                    window.location.reload();
                }
            });
        }
    });
    
    showNotification('üîÑ –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞!', 'info', updateBtn);
}

// ===== INSTALL PROMPT =====
let deferredPrompt;
let installButton;

// –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –ø–æ–¥—ñ—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PWA
window.addEventListener('beforeinstallprompt', (e) => {
    console.log('üì± PWA –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏');
    
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –ø–æ–∫–∞–∑—É
    e.preventDefault();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    deferredPrompt = e;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    showInstallButton();
});

// –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
window.addEventListener('appinstalled', (evt) => {
    console.log('üéâ PWA —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    hideInstallButton();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    showNotification('–ê—Å–∏—Å—Ç–µ–Ω—Ç –ù–£–û–° –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
});

// ===== –§–£–ù–ö–¶–Ü–á –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø =====

function showInstallButton() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    if (!installButton) {
        createInstallButton();
    }
    
    if (installButton) {
        installButton.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (installButton) {
                installButton.style.display = 'none';
            }
        }, 10000);
    }
}

function hideInstallButton() {
    if (installButton) {
        installButton.style.display = 'none';
    }
}

function createInstallButton() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—å–Ω—É –∫–Ω–æ–ø–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    installButton = document.createElement('button');
    installButton.id = 'pwa-install-button';
    installButton.innerHTML = `
        <i class="fas fa-download"></i>
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫
    `;
    
    // –°—Ç–∏–ª—ñ–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É
    installButton.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 15px 20px;
        border-radius: 50px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
        z-index: 1000;
        display: none;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    `;
    
    // –î–æ–¥–∞—î–º–æ hover –µ—Ñ–µ–∫—Ç
    installButton.addEventListener('mouseenter', () => {
        installButton.style.transform = 'translateY(-2px)';
        installButton.style.boxShadow = '0 8px 25px rgba(102, 126, 234, 0.6)';
    });
    
    installButton.addEventListener('mouseleave', () => {
        installButton.style.transform = 'translateY(0)';
        installButton.style.boxShadow = '0 4px 20px rgba(102, 126, 234, 0.4)';
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
    installButton.addEventListener('click', installPWA);
    
    // –î–æ–¥–∞—î–º–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    document.body.appendChild(installButton);
}

async function installPWA() {
    if (!deferredPrompt) {
        console.log('‚ùå Prompt –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        return;
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ prompt
    deferredPrompt.prompt();
    
    // –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const { outcome } = await deferredPrompt.userChoice;
    
    console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${outcome} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è`);
    
    if (outcome === 'accepted') {
        showNotification('–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞–ª–æ—Å—è...', 'info');
    }
    
    // –û—á–∏—â—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    deferredPrompt = null;
    hideInstallButton();
}

// ===== –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø =====

function showNotification(message, type = 'info', extraElement = null) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    let container = document.getElementById('pwa-notifications');
    if (!container) {
        container = document.createElement('div');
        container.id = 'pwa-notifications';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            max-width: 350px;
        `;
        document.body.appendChild(container);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const notification = document.createElement('div');
    
    const colors = {
        success: '#4CAF50',
        error: '#F44336',
        info: '#2196F3',
        warning: '#FF9800'
    };
    
    notification.style.cssText = `
        background: ${colors[type] || colors.info};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 10px;
        font-weight: 500;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
    `;
    
    const messageDiv = document.createElement('div');
    messageDiv.textContent = message;
    notification.appendChild(messageDiv);
    
    if (extraElement) {
        notification.appendChild(extraElement);
    }
    
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '‚úï';
    closeBtn.style.cssText = `
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 16px;
        padding: 0;
        margin-left: 10px;
    `;
    closeBtn.addEventListener('click', () => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
    notification.appendChild(closeBtn);
    
    container.appendChild(notification);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }, extraElement ? 10000 : 5000); // –ë—ñ–ª—å—à–µ —á–∞—Å—É —è–∫—â–æ —î –∫–Ω–æ–ø–∫–∞
}

// ===== OFFLINE –Ü–ù–î–ò–ö–ê–¢–û–† =====

function createOfflineIndicator() {
    const indicator = document.createElement('div');
    indicator.id = 'offline-indicator';
    indicator.innerHTML = `
        <div class="offline-indicator-content">
            <div class="offline-indicator-icon">
                <i class="fas fa-wifi-slash"></i>
            </div>
            <div class="offline-indicator-text">
                <span class="offline-indicator-title">–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>
                <span class="offline-indicator-subtitle">PWA –∞–∫—Ç–∏–≤–Ω–∏–π</span>
            </div>
            <div class="offline-indicator-pulse"></div>
        </div>
    `;
    
    indicator.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        z-index: 10000;
        transform: translateY(-100%);
        transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        backdrop-filter: blur(10px);
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const style = document.createElement('style');
    style.textContent = `
        .offline-indicator-content {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            max-width: 1200px;
            margin: 0 auto;
            gap: 12px;
            position: relative;
        }
        
        .offline-indicator-icon {
            font-size: 18px;
            color: #fff;
            animation: offline-pulse 2s infinite;
        }
        
        @keyframes offline-pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }
        
        .offline-indicator-text {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }
        
        .offline-indicator-title {
            font-size: 14px;
            font-weight: 600;
        }
        
        .offline-indicator-subtitle {
            font-size: 12px;
            opacity: 0.8;
        }
        
        .offline-indicator-pulse {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #4CAF50;
            margin-left: auto;
            animation: status-pulse 1.5s infinite;
        }
        
        @keyframes status-pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(0.8); }
        }
        
        @media (max-width: 768px) {
            .offline-indicator-content {
                padding: 10px 15px;
                gap: 10px;
            }
            
            .offline-indicator-title {
                font-size: 13px;
            }
            
            .offline-indicator-subtitle {
                font-size: 11px;
            }
        }
    `;
    
    if (!document.getElementById('offline-indicator-styles')) {
        style.id = 'offline-indicator-styles';
        document.head.appendChild(style);
    }
    
    document.body.appendChild(indicator);
    return indicator;
}

// –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑'—î–¥–Ω–∞–Ω–Ω—è
let offlineIndicator;
let pwaN–æ—ÇificationShown = false;

window.addEventListener('online', () => {
    console.log('üåê –ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
    pwaN–æ—ÇificationShown = false;
    if (offlineIndicator) {
        offlineIndicator.style.transform = 'translateY(-100%)';
    }
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ app.js
});

window.addEventListener('offline', () => {
    console.log('üì± –†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω');
    if (!offlineIndicator) {
        offlineIndicator = createOfflineIndicator();
    }
    offlineIndicator.style.transform = 'translateY(0)';
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ app.js, –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
});

// ===== –û–ù–û–í–õ–ï–ù–ù–Ø PWA =====

// –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å Service Worker
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.addEventListener('controllerchange', () => {
        console.log('üîÑ Service Worker –æ–Ω–æ–≤–ª–µ–Ω–æ');
        showNotification('–î–æ–¥–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        
        // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    });
}

// ===== –Ü–ù–®–Ü PWA –§–£–ù–ö–¶–Ü–á =====

// –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤ standalone —Ä–µ–∂–∏–º—ñ
window.addEventListener('beforeunload', (e) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ –≤ standalone —Ä–µ–∂–∏–º—ñ
    if (window.matchMedia('(display-mode: standalone)').matches) {
        e.preventDefault();
        e.returnValue = '';
    }
});

// –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
function hideAddressBar() {
    if (window.innerHeight < window.outerHeight) {
        setTimeout(() => {
            window.scrollTo(0, 1);
        }, 100);
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
window.addEventListener('load', () => {
    hideAddressBar();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ PWA –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if (window.matchMedia('(display-mode: standalone)').matches) {
        console.log('üì± PWA –∑–∞–ø—É—â–µ–Ω–æ –≤ standalone —Ä–µ–∂–∏–º—ñ');
    }
});

console.log('‚úÖ PWA —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
